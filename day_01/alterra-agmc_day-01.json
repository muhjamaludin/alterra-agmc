{
	"info": {
		"_postman_id": "8dd76f21-cd0c-4622-8c68-29f08821c983",
		"name": "alterra-agmc",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10734764"
	},
	"item": [
		{
			"name": "day-01",
			"item": [
				{
					"name": "book",
					"item": [
						{
							"name": "Get All book",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/book",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"book"
									]
								}
							},
							"response": []
						},
						{
							"name": "get token",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/token?client_id={{api_key}}&client_secret={{api_secret}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"token"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{api_key}}"
										},
										{
											"key": "client_secret",
											"value": "{{api_secret}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get book by id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/book/1234",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"book",
										"1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add book",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"client_id\": 1235,\r\n  \"client_key\": {{api_key}},\r\n  \"client_secret\": {{api_secret}},\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/book",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"book"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update book",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1234,\r\n  \"title\": \"Judul Buku SDua\",\r\n  \"isbn\": \"1-234-5678-9101112-13\",\r\n  \"writer\": \"Dr. Who\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/book/1234",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"book",
										"1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete book",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1234,\r\n  \"title\": \"Judul Buku SDua\",\r\n  \"isbn\": \"1-234-5678-9101112-13\",\r\n  \"writer\": \"Dr. Who\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/book/1234",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"book",
										"1234"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "binance-vision",
					"item": [
						{
							"name": "Klines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ts  = Date.now();\r",
											"pm.environment.set(\"timestamp\", ts);\r",
											"\r",
											"let paramsObject = {};\r",
											"\r",
											"const binance_api_secret = pm.environment.get(\"api_secret\");\r",
											"\r",
											"const parameters = pm.request.url.query;\r",
											"\r",
											"parameters.map((param) => {\r",
											"    if (param.key != 'signature' && \r",
											"        param.key != 'timestamp' && \r",
											"        !is_empty(param.value) &&\r",
											"        !is_disabled(param.disabled)) {\r",
											"            paramsObject[param.key] = param.value;\r",
											"            //console.log(encodeURIComponent(param.value));\r",
											"            //pm.environment.set(param.key, encodeURIComponent(param.value));\r",
											"    }\r",
											"})\r",
											"        \r",
											"Object.assign(paramsObject, {'timestamp': ts});\r",
											"\r",
											"if (binance_api_secret) {\r",
											"    const queryString = Object.keys(paramsObject).map((key) => {\r",
											"        return `${key}=${paramsObject[key]}`;\r",
											"    }).join('&');\r",
											"    console.log(queryString);\r",
											"    const signature = CryptoJS.HmacSHA256(queryString, binance_api_secret).toString();\r",
											"    pm.environment.set(\"signature\", signature);\r",
											"}\r",
											"\r",
											"\r",
											"function is_disabled(str) {\r",
											"    return str == true;\r",
											"}\r",
											"\r",
											"function is_empty(str) {\r",
											"    if (typeof str == 'undefined' ||\r",
											"        !str || \r",
											"        str.length === 0 || \r",
											"        str === \"\" ||\r",
											"        !/[^\\s]/.test(str) ||\r",
											"        /^\\s*$/.test(str) ||\r",
											"        str.replace(/\\s/g,\"\") === \"\")\r",
											"    {\r",
											"        return true;\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        return false;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{binance_url}}/api/v1/klines?symbol=BTCUSDT&interval=1d&startTime=1661990400&endTime=1662508800",
									"host": [
										"{{binance_url}}"
									],
									"path": [
										"api",
										"v1",
										"klines"
									],
									"query": [
										{
											"key": "symbol",
											"value": "BTCUSDT"
										},
										{
											"key": "interval",
											"value": "1d"
										},
										{
											"key": "startTime",
											"value": "1661990400"
										},
										{
											"key": "endTime",
											"value": "1662508800"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ts  = Date.now();\r",
											"pm.environment.set(\"timestamp\", ts);\r",
											"\r",
											"let paramsObject = {};\r",
											"\r",
											"const binance_api_secret = pm.environment.get(\"api_secret\");\r",
											"\r",
											"const parameters = pm.request.url.query;\r",
											"\r",
											"parameters.map((param) => {\r",
											"    if (param.key != 'signature' && \r",
											"        param.key != 'timestamp' && \r",
											"        !is_empty(param.value) &&\r",
											"        !is_disabled(param.disabled)) {\r",
											"            paramsObject[param.key] = param.value;\r",
											"            //console.log(encodeURIComponent(param.value));\r",
											"            //pm.environment.set(param.key, encodeURIComponent(param.value));\r",
											"    }\r",
											"})\r",
											"        \r",
											"Object.assign(paramsObject, {'timestamp': ts});\r",
											"\r",
											"if (binance_api_secret) {\r",
											"    const queryString = Object.keys(paramsObject).map((key) => {\r",
											"        return `${key}=${paramsObject[key]}`;\r",
											"    }).join('&');\r",
											"    console.log(queryString);\r",
											"    const signature = CryptoJS.HmacSHA256(queryString, binance_api_secret).toString();\r",
											"    pm.environment.set(\"signature\", signature);\r",
											"}\r",
											"\r",
											"\r",
											"function is_disabled(str) {\r",
											"    return str == true;\r",
											"}\r",
											"\r",
											"function is_empty(str) {\r",
											"    if (typeof str == 'undefined' ||\r",
											"        !str || \r",
											"        str.length === 0 || \r",
											"        str === \"\" ||\r",
											"        !/[^\\s]/.test(str) ||\r",
											"        /^\\s*$/.test(str) ||\r",
											"        str.replace(/\\s/g,\"\") === \"\")\r",
											"    {\r",
											"        return true;\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        return false;\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-MBX-APIKEY",
										"value": "{{api_key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{binance_url}}/api/v3/account?signature={{signature}}&timestamp={{timestamp}}",
									"host": [
										"{{binance_url}}"
									],
									"path": [
										"api",
										"v3",
										"account"
									],
									"query": [
										{
											"key": "signature",
											"value": "{{signature}}"
										},
										{
											"key": "timestamp",
											"value": "{{timestamp}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}